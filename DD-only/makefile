#/**
#Copyright 2006-2007 by Dresser, Inc., as an unpublished trade secret.  All rights reserved.
#This document and all information herein are the property of Dresser, Inc.
#It and its contents are  confidential and have been provided as a part of
#a confidential relationship.  As such, no part of it may be made public,
#decompiled, reverse engineered or copied and it is subject to return upon
#demand.
#
# The grand scheme of things is for now as follows:
# 1. The make utility is gnumake.exe, ver. 3.81 hacked to accept a space
#    instead of a TAB (TABs are OK, too, but we don't have'em TABs)
# 2. Each directory has its own makefile, called "conf.mak".
# 3. Each conf.mak should look as dumb as possible, with as much intelligence
#    as possible put in a commonly included makefile(s)
# 4. Each makefile defines (up to) four lists:
#       - SOURCE -- a list of C source files
#       - ASOURCE -- a list of assembler source files
#       - SUBDIR -- a list of subdirectories with more source files
#       - ISUBDIR -- a list of subdirectories with shared header files.
#    Additionally, Unimal include-files dependencies require this structure:
#       - UFILES -- a list of Unimal sources (.u), if any.
#       - USOURCE -- a list of all source files generated by Unimal, if any.
#    Of course, a good maintainer would combine the lists as in this example
#     where foo.u produces foo.c and foo.h and bar.u, only bar.h, and baz.c
#     is hand-made:
#        UFILES_C = foo.u -- Unimal files producing .c
#        UFILES_H = bar.u $(UFILES_C) -- Unimal files producing .h
#        UFILES = $(UFILES_H) -- no need to repeat same file
#        USOURCE_C = $(UFILES_C:%.u=%.c) -- .c files from Unimal
#        SOURCE = baz.c $(USOURCE_C) -- all .c files
#        USOURCE = $(USOURCE_C) $(UFILES_H:%.u=%.h) -- all Unimal output for generating and cleanup
#
#    This allows to enforce header visibility:
#       foo/bar.c sees all headers in foo, in ../$(ISUBDIR), ../../$(ISUBDIR) etc.
#    This also makes lint include directories configuration less of a zoo.
#    Elements of the lists may not have any path information!!!
#
#   To handle different commands for different targets, this makefile
#   invokes a makefile appropriate for the target to build, e.g.
#       - buildfile.mak
#       - lintfile.mak
#   They all iterate through project subdirectories in a uniform way, by
#   including dirwalk.mak, and then do their target-specific things
#
#*/

#------------- Main targets ---------------
.PHONY: all BUILD BUILD_ALL LINT UNIMAL
.PHONY: FEATURES REQIMPORT MEMMAP clean

all: HELP

.DELETE_ON_ERROR : ;
#------------- End Main targets ---------------

export LPAREN=(
export RPAREN=)
# ------------------ common setup -----------------------
#Setup makefile variables to get it going with descent to subdirectories
FSLASH:=/
__SLASH__=\ #Necessary
SLASH=$(strip $(__SLASH__))
export SLASH
#For pmake, CURDIR must be created
ifeq ($(CURDIR),)
CURDIR=$(shell cd)
endif
_CURDIR:=$(subst /,\,$(CURDIR))
export PROJDIR:=$(_CURDIR)
#per-directory configurations have identical names
export LOCAL_CONF=conf.mak
HELPERS=.\buildhelpers

#cmd.exe chokes on forward slashes if gnumake is invoked with the path as in tools\gnumake.
#The redefinition is to appease cmd.exe.
MAKE:=$(subst /,\,$(MAKE))

#For easy debugging to turn command echo on and off
Hide?=@# #Swap AT and SHARP to print all commands
export Hide

export NVDUMPINC:=$(PROJDIR)\$(HELPERS)\nvmdumpinc.mak
export helpers:=$(PROJDIR)/$(HELPERS)

# ------------------ end common setup -----------------------

# ---------------- Build output setup -------------------
#   Per convention, if output dir is REL|rel|Rel, it is no-debug build
#   Note that Release build automatically runs Lint (Oops, on Debug version)
DIR?=Dbg
#See what DIR was effectively requested from the command line
ifneq (,$(strip $(findstring $(DIR),REL Rel rel)))
DIR=Rel
LINT_OPT=LINT #PCLP
else
LINT_OPT=
endif
export DIR
# ---------------- End directories setup -------------------

# -------------- Project build setup, now with multiple projects support  -------------
export PROJ_PREFIX=project_
export PROJ_SUFFIX=
export PROJECT_DEFINITIONS_DIR:=includes
# ---------------------------------------------------------------------------------------

export DIRLIST_COMMAND:=dir /AD /B
ALL_PROJ_DIRS=$(shell $(DIRLIST_COMMAND) $(PROJECT_DEFINITIONS_DIR)\$(PROJ_PREFIX)*$(PROJ_SUFFIX))
# project variant "proj" must be among defined projects

ifeq ($(proj),)
PROJ?=default
PROJECT_INCDIR:=$(CURDIR)\$(PROJECT_DEFINITIONS_DIR)
projtest:
    $(Hide)echo No variant specified: Using default project $(PROJ)
else
projdefdir:=$(shell dir /B $(PROJECT_DEFINITIONS_DIR)\$(PROJ_PREFIX)$(proj)$(PROJ_SUFFIX)\* 2>nul)
ifeq ($(strip $(projdefdir)),)
projtest:
    $(error Project "$(proj)" is not defined)
else
PROJ:=$(proj)
export settings:=$(_CURDIR)$(SLASH)$(PROJECT_DEFINITIONS_DIR)\$(PROJ_PREFIX)$(PROJ)$(PROJ_SUFFIX)/settings.mak
include $(settings)
MN_INSTRUM?=noinstrum
export MN_INSTRUM
$(info MN_INSTRUM=$(MN_INSTRUM) MAINLIB=$(MAINLIB))

PROJECT_INCDIR:=$(CURDIR)\$(PROJECT_DEFINITIONS_DIR)\$(PROJ_PREFIX)$(PROJ)$(PROJ_SUFFIX)
projtest:
    $(Hide)echo Using project $(PROJ)
endif
endif
export PROJ
export PROJECT_INCDIR


# build directories structure (flat for now; effective directories set up in dirwalk.mak)
CMDDIR_ROOT=$(_CURDIR)$(SLASH)cmdbuild
CMDDIR=$(CMDDIR_ROOT)$(SLASH)$(DIR)
export CMDDIR_PROJ=$(CMDDIR)$(SLASH)$(PROJ_PREFIX)$(PROJ)$(PROJ_SUFFIX)
# Object directory
export OBJDIR=$(CMDDIR)

#   program names, short and full
export PROG=$(PROJ)

# -------------- end project build setup -------------


# ---------------- IAR toolchain setup -------------------
#IAR C environment initialization methods
export verlist_init1:=4.20A 4.31A 4.41A 5.10 5.11
export verlist_init2:=5.20 5.30 5.40
export verlist_init3:=5.50 6.30 6.50 7.70 7.71 8.30 8.32 EWARM_FS_8_22_3.17334 EWARM_FS_8_40_3_23190

#Supported IAR toolchains
verlist:=$(verlist_init1) $(verlist_init2) $(verlist_init3)

ifneq (,$(filter $(majorver), EWARM_FS_8_22_3 EWARM_FS_8_40_3_23190))
toolver:=8
else
toolver:=$(basename $(ver))
endif
export toolconf:=$(PROJDIR)/$(HELPERS)/ewarm$(toolver).x.mak
export ver
INCDIR:=


export projparam:=$(PROJ_PREFIX)$(PROJ)$(PROJ_SUFFIX)
uprojparam:=$(projparam:.h=.inc)
#Observe the patently bizarre quotes escape required by CMD.EXE!
PROJSPEC:=PROJPARAM_H_="\"$(projparam)\""
export UPROJSPEC:=PROJPARAM_INC_=$(uprojparam)

ifdef use_debug_libraries
EMBOS_MODE:= D
libdir_Softing := target/mak/FF_SVI_DBG/lib
else
#EMBOS_MODE:= R
EMBOS_MODE:= S
libdir_Softing := target/mak/FF_SVI_REL/lib
endif
export EMBOS_MODE
export MAINLIB= _embOS_CortexM_IAR/Start/Lib/os7m_tl__$(EMBOS_MODE).a $(libdir_Softing)/base.a $(libdir_Softing)/ffbs.a
export INCDIR

# ---------------- End IAR toolchain setup -------------------

# - - - Masoneilan/Ernie's/Ark's/Unix-like add-ons - - - -
MNTOOLS:=$(PROJDIR)\tools
MNS_CONVERT:=$(MNTOOLS)\mnhextool.exe
MN_SED:=$(MNTOOLS)\sed.exe --text
UNIMAL:=$(MNTOOLS)\Unimal.exe
MN_TEE:=$(MNTOOLS)\ptee.exe
MN_CAT:=$(MNTOOLS)\si-cat.exe
MN_ZIP:=$(MNTOOLS)\7za.exe -tzip
MN_RM:=$(MNTOOLS)\rm.exe
MN_MV:=$(MNTOOLS)\mv.exe
#Win32 built-in echo is crippled; we take the one from GNU shelutils
MN_ECHO:=$(MNTOOLS)\echo.exe -E
export MN_RM MN_CAT MN_SED MN_MV MN_ECHO UNIMAL MNS_CONVERT MN_CRCGEN MN_ZIP MN_TEE
export MN_CP = $(MNTOOLS)\cp.exe
export MNTOOLS
# - - - End add-ons - - - -

# -------------- simple test of directory walk engine ---------
TESTWALK: projtest
    $(Hide)$(MAKE) walk -f $(DIRWALK_TEST)
# -------------- end simple test ---------------------

# ---------------- helper makefiles to do the actual job -------------
export lintmak:=$(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)lintfile.mak
export buildmak:=$(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)buildfile.mak
export snapshotmak:=$(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)snapshotfile.mak
export unimalmak:=$(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)ufile.mak
featuresgenmak:=$(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)featuresgen.mak
export cleanmak:=$(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)clean.mak
export compmak:=$(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)compfile.mak
export ldramak:=$(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)ldra.mak
#export ldrabuild:=$(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)buildinstr.mak
export DIRWALK_TEST=$(PROJDIR)\$(HELPERS)\testwalk.mak
export DIRWALK:=$(PROJDIR)\$(HELPERS)\dirwalk.mak
export scripts:=$(PROJDIR)\$(HELPERS)\scripts.mak
export REQIMPORT := $(PROJDIR)\$(HELPERS)\reqimport.mak
export HELPERS

allhelpers:=$(buildmak) $(unimalmak) $(cleanmak) $(compmak) $(snapshotmak) $(lintmak) $(cmpcpy) $(DIRWALK) $(_CURDIR)$(SLASH)makefile
#----------------- end helper makefiles ----------------

export _CURDIR

#================== Rules section ==========================

# ------------------- build directories setup ------------------------
$(CMDDIR_PROJ) : projtest $(CMDDIR)
    -mkdir $(CMDDIR_PROJ)

$(CMDDIR) : $(CMDDIR_ROOT)
    -mkdir $(CMDDIR)

$(CMDDIR_ROOT) : $(MAKEFILE_LIST)
    -mkdir $(CMDDIR_ROOT)

# ------------------- end build directories setup ------------------------


export featmak:=$(helpers)/feat.mak
export buildexec:=$(PROJDIR)$(SLASH)$(HELPERS)/buildexec.mak

export lintexec:=$(PROJDIR)$(SLASH)$(HELPERS)/lintexec.mak

# ----------------- PC-Lint part ----------------------
#Unless requested from command line, we no longer do unit lint separately
UNITLINT?=NO
export UNITLINT

PRELINT?=PRELINT

LINT PCLP: $(PRELINT)
    $(MAKE) -f $(lintexec) $@ ver=$(ver) OBJDIR=$(CMDDIR) UNITLINT=$(UNITLINT) PRELINT=$(PRELINT)

PRELINT: $(CMDDIR_PROJ) force
    $(MAKE) -f $(buildexec) CCVER ver=$(ver)
    $(MAKE) -f $(lintexec) $@ ver=$(ver) OBJDIR=$(CMDDIR) UNITLINT=$(UNITLINT)

.PHONY: ULINT UPCLP
ULINT UPCLP:
	$(MAKE) -f $(lintexec) $@ ver=$(ver) OBJDIR=$(CMDDIR) unit=$(unit)

codestat: $(CMDDIR_PROJ) force
    $(MAKE) -f $(lintexec) $@ ver=$(ver) OBJDIR=$(CMDDIR) UNITLINT=NO


# ----------------- Actual build part: Extract modules ----------------------
export ModSync=$(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)modfaster.mak


.PHONY: MODULES modclean

MODULES modclean :
    $(MAKE) -f $(ModSync) $@

#Base name for HART commands import file (needed by MODULES and HCIMPORT)
export hcmdroot:=inc_$(PROJ)$(SLASH)HARTCommands



export instrumxml5:=mn_instrum\$(MN_INSTRUM)\instrum.xml


# ----------------- Actual build part ----------------------
ifdef NOGEN
GEN=
else
GEN=UNIMAL
endif
export GEN


#   All buildable files depend on the makefiles encountered on the path
#   (except .d dependency files). We capture them in $(misc)
#   It must not contain absolute paths for GNU make's dislike of colons in the paths
misc=$(subst $(_CURDIR)\,,$(buildmak) $(unimalmak) $(MAKEFILE_LIST))

#export topdep:=$(subst $(_CURDIR)\,,$(allhelpers))
export topdep:=$(misc)

BUILD: $(CMDDIR_PROJ) $(GEN) $(LINT_OPT) force
    $(MAKE) -f $(buildexec) BUILD 2>&1 ver=$(ver) OBJDIR=$(CMDDIR) | $(MN_TEE) build_$(PROJ).log
	$(additional_build_steps)

UNIMAL: REQIMPORT
    $(Hide)$(MAKE) -r -f $(buildexec) UNIMAL OBJDIR=$(CMDDIR)

REQIMPORT : FEATURES $(MAKEFILE_LIST)
    $(Hide)$(MAKE) -r -f $(REQIMPORT) REQIMPORT OBJDIR=$(CMDDIR)

FEATURES: ;

#FEATURES MEMMAP: $(CMDDIR_PROJ)  $(MAKEFILE_LIST)
#    $(MAKE) -f $(buildexec) $@

export projfeatures:=$(PROJECT_INCDIR)/projfeatures.mak

# ========== Unit test build/exec/regress =============
testexec:=$(HELPERS)/testexec.mak
export UTestHome:=inhouse
export UTestLogHome:=$(UTestHome)$(SLASH)unit_test
UT_OBJDIR:=$(subst /,\,$(PROJDIR)$(SLASH)$(UTestLogHome))\$(DIR)

UTBUILD UTRUNS UTREGRESS: force
    $(MAKE) $@ -f $(testexec) ver=$(ver) OBJDIR=$(UT_OBJDIR) MN_INSTRUM=maestra

# location of test makefile drivers
FSLASH:=/#
UTSET_LIST_DISCOVERED:=$(filter-out $(UTestHome)/$(LOCAL_CONF),$(wildcard $(UTestHome)$(FSLASH)*.mak))
UTSET_LIST?=$(UTSET_LIST_DISCOVERED)
UTSET_LIST_BSLASH:=$(subst /,\,$(UTSET_LIST))

.PHONY: $(UTSET_LIST_BSLASH)

UTEST_ALL : $(UTSET_LIST_BSLASH)
    @echo Test is completed of: $(UTSET_LIST_BSLASH)

#AK:TODO: If UTSET_LIST_BSLASH contains directories, gnumake recurses endlessly, hence notdir in the command. FIXIT!
$(UTSET_LIST_BSLASH) : force
    $(MAKE) UTREGRESS UTSET=$(notdir $@)

# ========== End Unit test build/exec/regress =============

# -------------------- clean -------------------
clean : clean_local
    $(Hide)$(MAKE) clean -f $(cleanmak) goal=clean
    $(Hide)$(MAKE) clean -C inc_$(PROJ) -f $(hcimport)

clean_local :
    $(MN_RM) -r $(CMDDIR_PROJ)
    -$(MN_RM) snapshot.*
    -$(MN_RM) $(PROJ).dep
    -$(MN_RM) timestamp

realclean : clean_local modclean
    $(MN_RM) -f -r $(CMDDIR)
    $(Hide)$(MAKE) realclean -f $(cleanmak) goal=realclean
    -$(MN_RM) $(PROJ).*
    -$(MN_RM) snapshot_$(PROJ).zip
    -$(MN_RM) $(PROJ).ewp
    -$(MN_RM) $(PROJ).ewd


# ------------------- execute with simulator ---------------
EXEC:
    $(DEBUGGER) $(DEBUGOPTIONS) $(EXE) $(DEBUG_PLUGIN) $(DEBUGOPTIONS_BACKEND)



export miscexec:=$(_CURDIR)$(SLASH)$(HELPERS)/miscexec.mak
# ----------------- Doxygen documentation ---------------------------
DOX DOXZIP:
    $(MAKE) -f $(miscexec) $@


# ----------------- IDE generation --------------------
IDE: projtest FEATURES
    $(MAKE) -f $(buildexec) ver=$(ver) $@

# ---------------- BUILD ALL --------------------
.PHONY : $(ALL_PROJ_DIRS) BUILD_ALL
BUILD_ALL: $(ALL_PROJ_DIRS) force

$(ALL_PROJ_DIRS) : force
    @echo Building $@ [$(subst $(PROJ_PREFIX),,$(@:$(PROJ_SUFFIX)=))]
    $(pause)
    $(MAKE) BUILD proj=$(subst $(PROJ_PREFIX),,$(@:$(PROJ_SUFFIX)=))


# ----------------- official sync, build and send to the official directory -----------------
#SS
#    $(MAKE) $@ -f $(miscexec)

#This is only a helper for main project's plugin with files it doesn't know about
SEND :
	$(MN_CP) -f -p target\appl\fbif\script\paramdoc.html $(MNS_OFFICIAL_DIR)\paramdoc.html
    $(MN_CP) -f -p target\appl\fbif\ddl\$(DEVICE_TYPE)/*.cff $(MNS_OFFICIAL_DIR)/
    $(MN_CP) -f -p target\appl\fbif\ddl\$(DEVICE_TYPE)/*.ff5 $(MNS_OFFICIAL_DIR)/
    $(MN_CP) -f -p target\appl\fbif\ddl\$(DEVICE_TYPE)/*.sy5 $(MNS_OFFICIAL_DIR)/
    $(MN_CP) -f -p target\appl\fbif\ddl\$(DEVICE_TYPE)/*.ffo $(MNS_OFFICIAL_DIR)/
    $(MN_CP) -f -p target\appl\fbif\ddl\$(DEVICE_TYPE)/*.sym $(MNS_OFFICIAL_DIR)/

#OFFICIAL OFFREPARE :
#    $(MAKE) $@ -f $(miscexec)
#    @echo ERRORLEVEL=%ERRORLEVEL%


# ----------------- help ---------------------------
help: HELP
HELP: $(addsuffix .txt,$(topic)) force
ifeq ($(topic),)
    $(Hide)type $(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)$@.txt
endif

ifneq ($(topic),)
$(addsuffix .txt,$(topic)) : force
    @echo ------------ Help on topic `$(basename $@)` ----------------
    $(Hide)type $(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)$@
endif

# --------------- share -----------------

export sharebox:=$(_CURDIR)$(SLASH)$(HELPERS)$(SLASH)sharebox.mak
sharebox:
    $(MAKE) -f $(sharebox)


# --------------------------------------------------
force : ;

#/* This line marks the end of the source */
